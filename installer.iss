; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define public Dependency_Path_NetCoreCheck "installer\redist\"

#define AppName "Susi"
#define AppVersion "0.1.0.0"
#define AppPublisher "Sean Francis N. Ballais"
#define AppURL "https://github.com/seanballais/susi-gui-windows"
#define AppPackagePath "bin\build\susi-gui-windows\x64\Release\net8.0-windows10.0.19041.0\win-x64\AppPackages\susi-gui-windows_0.1.0.0_x64_Test"

#include "InstallerCodeDependencies.iss"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{C24506BE-0143-48C3-A591-EBEAD957F362}
AppName={#AppName}
AppVersion={#AppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#AppPublisher}
AppPublisherURL={#AppURL}
AppSupportURL={#AppURL}
AppUpdatesURL={#AppURL}
CreateAppDir=no
LicenseFile=LICENSE.md
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=dialog
OutputDir=bin\build\installer
OutputBaseFilename=susi-0.1.0.0-setup-win-x64
Compression=lzma
SolidCompression=yes
WizardStyle=modern
ArchitecturesInstallIn64BitMode=x64
ArchitecturesAllowed=x64

[Files]
Source: "{#AppPackagePath}\susi-gui-windows_0.1.0.0_x64.cer"; DestDir: "{tmp}"
Source: "{#AppPackagePath}\susi-gui-windows_0.1.0.0_x64.msix"; DestDir: "{tmp}"

[Run]
Filename: "certutil.exe"; Parameters: "-addstore ""TrustedPeople"" ""{tmp}\susi-gui-windows_0.1.0.0_x64.cer"""; StatusMsg: "Adding certificate of developer..."
Filename: "{sys}\WindowsPowerShell\v1.0\powershell.exe"; Parameters: "Add-AppPackage -Path ""{tmp}\susi-gui-windows_0.1.0.0_x64.msix"""; StatusMsg: "Installing Susi..."

[Code]
/////////////////////////////////////////////////////////////////////////////
// From https://stackoverflow.com/a/39845057/1116098.
procedure RtlMoveMemory(Dest: string; Source: PAnsiChar; Len: Integer);
  external 'RtlMoveMemory@kernel32.dll stdcall';

function LoadStringFromUTF16LEFile(FileName: string; var S: string): Boolean;
var
  A: AnsiString;
begin
  Result := LoadStringFromFile(FileName, A);
  if Result then
  begin
    SetLength(S, Length(A) div 2);
    RtlMoveMemory(S, A, Length(S) * 2);
    // Trim BOM, if any
    if (Length(S) >= 1) and (Ord(S[1]) = $FEFF) then
      Delete(S, 1, 1);
  end;
end;
/////////////////////////////////////////////////////////////////////////////

function IsInstallForMachine: Boolean;
begin
  Result := IsAdmin() = True;
end;

function IsInstallForUserOnly: Boolean;
begin
  Result := IsAdmin() = False;
end;

function IsWinAppSDK15x64Installed: Boolean;
var
  TmpPSCommandOutputFile: string;
  PSCommand: string;
  PackageSubstring: string;
  ExecStdout: string;
  ResultCode: integer;
begin
  PackageSubstring := 'Microsoft.WindowsAppRuntime.1.5';

  TmpPSCommandOutputFile := ExpandConstant('{tmp}') + '\susi_installer_winappsdk_availability_check.txt';

  PSCommand := Format(
    '"%s > "%s""', [
      '((Get-AppXPackage Microsoft.WindowsAppRuntime.1.5*) | Where-Object Architecture -eq "X64").PackageFullName',
      TmpPSCommandOutputFile
  ]);

  Exec(ExpandConstant('{sys}\WindowsPowerShell\v1.0\powershell.exe'), PSCommand, '', SW_HIDE, ewWaitUntilTerminated, ResultCode);

  Result := False;
  if LoadStringFromUTF16LEFile(TmpPSCommandOutputFile, ExecStdout) then begin
    if Pos(PackageSubstring, ExecStdout) > 0 then begin
      Result := True;
    end;   
  end;
end;

procedure Dependency_AddWindowsAppSDK;
begin
  if not IsWinAppSDK15x64Installed() then begin
    Dependency_Add(
      'windowsappruntimeinstall-x64.exe',
      '--quiet',
      'Windows App SDK Runtime 1.5.1 (x64)',
      'https://download.microsoft.com/download/1/e/c/1ec0ca0a-e3a3-4d7e-9f11-d679d8bf4b4c/windowsappruntimeinstall-x64.exe',
      '', True, False
    );
  end;
end;

function InitializeSetup: Boolean;
begin
  Dependency_AddVC2015To2022;
  Dependency_AddDotNet80Desktop;
  Dependency_AddWindowsAppSDK;

  Result := True;
end;

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

